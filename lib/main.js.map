{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nCHR                       = require 'coffeenode-chr'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'SVGTTF/MAIN'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n# exec                      = ( require 'util' ).promisify ( require 'child_process' ).exec\nspawn_sync                = ( require 'child_process' ).spawnSync\n# CP                        = require 'child_process'\njr                        = JSON.stringify\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nOT                        = @_OT      = require 'opentype.js'\nSvgPath                   = @_SvgPath = require 'svgpath'\n# DUMBSVGPATH               = require './experiments/dumb-svg-parser'\npath_precision            = 3\n\n\n#===========================================================================================================\n# METRICS\n#-----------------------------------------------------------------------------------------------------------\n@new_metrics = ->\n  R =\n    em_size:          4096  ### a.k.a. design size, grid size ###\n    # em_size:          1000  ### a.k.a. design size, grid size ###\n    ascender:         null,\n    descender:        null,\n    font_size:        360   ### in pixels ###\n    scale_factor:     null\n    # ### TAINT magic number\n    # for whatever reason, we have to calculate advanceWidth with an additional tracking factor:\n    # advanceWidth = glyph.advanceWidth * metrics.scale_factor * metrics.tracking_factor ###\n    # tracking_factor:  256 / 182\n  R.scale_factor        =  R.em_size / R.font_size\n  R.ascender            =  R.em_size / ( 256 / 220 )\n  R.descender           = -R.em_size / 5\n  # R.global_glyph_scale  = 50 / 48.5 ### TAINT value must come from configuration ###\n  R.global_glyph_scale  = 256 / 248 ### TAINT value must come from configuration ###\n  # R.global_glyph_scale  = 1 ### TAINT value must come from configuration ###\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_otjs_font = ( me, name, glyphs ) ->\n  validate.nonempty_text name\n  return new OT.Font {\n    familyName:   name,\n    styleName:    'Medium',\n    unitsPerEm:   me.em_size,\n    ascender:     me.ascender,\n    descender:    me.descender,\n    glyphs:       glyphs }\n\n#-----------------------------------------------------------------------------------------------------------\n@_find_ideographic_advance_factor = ( otjsfont ) ->\n  ### In some fonts, the advance width of CJK ideographs differs from the font design size; this is\n  especially true for fonts from the `cwTeXQ` series. This routine probes the font with a number of CJK\n  codepoints and returns the ratio of the font design size and the advance width of the first CJK glyph.\n  The function always returns 1 for fonts that do not contain CJK characters. ###\n  probe = Array.from '一丁乘㐀㑔㙜𠀀𠀁𠀈𪜵𪝘𪜲𫝀𫝄𫠢𫡄𫡦𬺰𬻂'\n  for chr in probe\n    cid = chr.codePointAt 0\n    continue unless ( glyph = @glyph_from_cid otjsfont, cid )?\n    return otjsfont.unitsPerEm / glyph.advanceWidth\n  return 1\n\n#===========================================================================================================\n# FONTFORGE\n#-----------------------------------------------------------------------------------------------------------\n@exec_fontforge_script = ( script, parameters = null ) ->\n  command     = 'fontforge'\n  parameters  = [ '--lang=ff', '-c', script, ( parameters ? [] )..., ]\n  settings    =\n    cwd:        process.cwd()\n    timeout:    3 * 60 * 1000 ### TAINT make timeout configurable ###\n    encoding:   'utf-8'\n    shell:      false\n  #.........................................................................................................\n  { status\n    stderr }  = spawn_sync command, parameters, settings\n  #.........................................................................................................\n  unless status is 0\n    throw new Error \"\"\"^svgttf#3309 when trying to execute `#{command} #{jr parameters}`, an error occurred:\n      #{stderr}\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@rewrite_with_fontforge = ( path ) ->\n  ### TAINT rewrite using `exec_fontforge_script()` ###\n  help \"^svgttf#0091 size before normalisation: #{CND.format_number @_size_from_path path} B\"\n  #.........................................................................................................\n  command     = 'fontforge'\n  parameters  = [ '--lang=ff', '-c', \"Open($1); Generate($1);\", path, ]\n  settings    =\n    cwd:        process.cwd()\n    timeout:    3 * 60 * 1000\n    encoding:   'utf-8'\n    shell:      false\n  #.........................................................................................................\n  { status\n    stderr }  = spawn_sync command, parameters, settings\n  #.........................................................................................................\n  unless status is 0\n    throw new Error \"\"\"^svgttf#3309 when trying to execute #{jr command} #{jr parameters}, an error occurred:\n      #{stderr}\"\"\"\n  #.........................................................................................................\n  help \"^svgttf#0091 size  after normalisation: #{CND.format_number @_size_from_path path} B\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_size_from_path = ( path ) ->\n  try\n    return ( FS.statSync path ).size\n  catch error\n    return null if error.code is 'ENOENT'\n    throw error\n\n#===========================================================================================================\n# OPENTYPE.JS\n#-----------------------------------------------------------------------------------------------------------\n@otjsfont_from_path = ( path ) -> OT.loadSync path\n\n#-----------------------------------------------------------------------------------------------------------\n@save_otjsfont = ( path, otjsfont ) ->\n  # FS.writeFileSync path, buffer = otjsfont.toBuffer() # deprecated\n  # buffer = Buffer.from otjsfont.toArrayBuffer()\n  buffer = Buffer.from @_otjsfont_toArrayBuffer otjsfont\n  FS.writeFileSync path, buffer\n  return buffer.length\n\n@_otjsfont_toArrayBuffer = ( otjsfont ) ->\n  sfntTable = otjsfont.toTables();\n  bytes     = sfntTable.encode();\n  buffer    = new ArrayBuffer(bytes.length);\n  intArray  = new Uint8Array(buffer);\n  ```\n  for (let i = 0; i < bytes.length; i++) {\n      intArray[i] = bytes[i];\n  }\n  ```\n  return buffer;\n\n#-----------------------------------------------------------------------------------------------------------\n@list_glyphs_in_otjsfont = ( otjsfont ) ->\n  R = new Set()\n  #.........................................................................................................\n  for idx, glyph of otjsfont.glyphs.glyphs\n    # if glyph.name in [ '.notdef', ] or ( not glyph.unicode? ) or ( glyph.unicode < 0x20 )\n    if ( not glyph.unicode? ) or ( glyph.unicode < 0x20 )\n      warn \"skipping glyph #{rpr glyph.name}\"\n      continue\n    unicodes  = glyph.unicodes\n    unicodes  = [ glyph.unicode, ] if ( not unicodes? ) or ( unicodes.length is 0 )\n    # debug rpr glyph\n    # debug rpr unicodes\n    for cid in unicodes\n      # debug rpr cid\n      R.add String.fromCodePoint cid\n  #.........................................................................................................\n  return [ R... ].sort()\n\n#-----------------------------------------------------------------------------------------------------------\n@svg_path_from_cid = ( otjsfont, cid ) ->\n  pathdata    = @svg_pathdata_from_cid otjsfont, cid\n  glyph       = String.fromCodePoint cid\n  cid_hex     = \"0x#{cid.toString 16}\"\n  return \"<!-- #{cid_hex} #{glyph} --><path d='#{pathdata}'/>\"\n\n#-----------------------------------------------------------------------------------------------------------\n# @svg_pathdata_from_cid = ( otjsfont, cid ) -> ( @)\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT rename to something like `otjsglyph_from_...()` ###\n@glyph_from_cid = ( otjsfont, cid ) ->\n  validate.positive_integer cid\n  return @glyph_from_glyph otjsfont, String.fromCodePoint cid\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT rename to something like `otjsglyph_from_...()` ###\n@glyph_from_glyph = ( otjsfont, glyph ) ->\n  ### TAINT validate is character ###\n  # validate.positive_integer cid\n  R = otjsfont.charToGlyph glyph\n  return if R.unicode? then R else null\n\n#-----------------------------------------------------------------------------------------------------------\n@_quickscale = ( path_obj, scale_x, scale_y = null ) ->\n  scale_y ?= scale_x\n  for command in path_obj.commands\n    for key, value of command\n      switch key\n        when 'x', 'x1', 'x2' then command[ key ] *= scale_x\n        when 'y', 'y1', 'y2' then command[ key ] *= scale_y\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@glyph_and_pathdata_from_cid = ( me, otjsfont, cid ) ->\n  validate.positive_integer cid\n  fglyph              = @glyph_from_cid otjsfont, cid\n  # debug '^svgttf/glyph_and_pathdata_from_cid@277262', fglyph?.name\n  return null if ( not fglyph? )\n  # return null if ( not fglyph? ) or ( fglyph.name is '.notdef' )\n  path_obj            = fglyph.getPath 0, 0, me.font_size\n  return null if path_obj.commands.length is 0\n  global_glyph_scale  = me.global_glyph_scale ? 1\n  scale_factor        = me.scale_factor * global_glyph_scale\n  @_quickscale path_obj, scale_factor, -scale_factor\n  pathdata = path_obj.toPathData path_precision\n  return { glyph: fglyph, pathdata, }\n\n#-----------------------------------------------------------------------------------------------------------\n@otjspath_from_pathdata = ( pathdata ) ->\n  validate.nonempty_text pathdata\n  svg_path  = new SvgPath pathdata\n  R         = new OT.Path()\n  d = R.commands\n  for [ type, tail..., ] in svg_path.segments\n    # debug '^svgttf#3342', [ type, tail..., ]\n    ### TAINT consider to use API (moveTo, lineTo etc) ###\n    switch type\n      when 'M', 'L'\n        [ x, y, ] = tail\n        d.push { type, x, y, }\n      when 'C'\n        [ x1, y1, x2, y2, x, y, ] = tail\n        d.push { type, x1, y1, x2, y2, x, y, }\n      when 'Q'\n        [ x1, y1, x, y, ] = tail\n        d.push { type, x1, y1, x, y, }\n      when 'Z'\n        d.push { type, }\n      else throw new Error \"^svgttf#2231 unknown SVG path element #{rpr type}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_fallback_glyph = ( me, shape = 'square' ) ->\n  # validate.svgttf_metrics me\n  '❶❷❸❹❺❻❼❽❾❿'\n  validate.nonempty_text shape\n  #.........................................................................................................\n  width         = 3 * me.em_size // 4\n  x0            = me.em_size // 8\n  x1            = x0 + width\n  y0            = 0\n  y1            = width\n  path          = new OT.Path()\n  #.........................................................................................................\n  switch shape\n    when 'square'\n      path.moveTo x0, y0\n      path.lineTo x1, y0\n      path.lineTo x1, y1\n      path.lineTo x0, y1\n      path.close()\n    when 'uptriangle'\n      xm = ( x0 + x1 ) // 2\n      path.moveTo x0, y0\n      path.lineTo x1, y0\n      path.lineTo xm, y1\n      path.close()\n    when 'round'\n      xm = ( x0 + x1 ) // 2\n      ym = ( y0 + y1 ) // 2\n      path.moveTo   xm, y0\n      path.quadTo   x1, y0, x1, ym\n      path.quadTo   x1, y1, xm, y1\n      path.quadTo   x0, y1, x0, ym\n      path.quadTo   x0, y0, xm, y0\n      path.close()\n    else throw new Error \"^svgttf#3391 unknown shape #{rpr shape}\"\n  #.........................................................................................................\n  name          = '.notdef'\n  unicode       = 0\n  advanceWidth  = me.em_size\n  return new OT.Glyph { name, unicode, advanceWidth, path, }\n\n\n\n\n\n\n\n"
  ]
}