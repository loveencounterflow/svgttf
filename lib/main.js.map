{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;;;;;;;;AAAA,MAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,IAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA,EAAA;;EAaA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,gBAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb;;EAC5B,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAzB5B;;;EA2BA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,SAAA,GAA4B,CAAE,OAAA,CAAQ,eAAR,CAAF,CAA2B,CAAC;;EACxD,KAAA,GAA4B,OAAA,CAAQ,OAAR,EA9B5B;;;EAgCA,IAAC,CAAA,KAAD,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,QAHF,EAIE,OAJF,EAKE,OALF,EAME,OANF,CAAA,GAM4B,IAAC,CAAA,KAN7B,EAjCA;;;EAyCA,OAAA,GAA4B,OAAA,CAAQ,SAAR,EAzC5B;;;;EA4CA,CAAA,GAA4B,OAAA,CAAQ,mBAAR,EA5C5B;;;;EA+CA,IAAA,GAA4B,OAAA,CAAQ,MAAR,EA/C5B;;;;EAkDA,OAAA,GAA4B,OAAA,CAAQ,SAAR,EAlD5B;;;;;EAwDA,MAAA,GAAY;;EACZ,OAAA,GAAY;;EACZ,OAAA,GAEE,CAAA;;IAAA,QAAA,EAAoB,CAAE,MAAA,GAAS,CAAX,EAAc,MAAA,GAAS,CAAvB,CAApB;;IAEA,YAAA,EAAoB,CAAE,CAAF,EAAK,MAAA,GAAS,KAAd,CAFpB;;IAIA,QAAA,EAAoB,MAJpB;;;;IAQA,cAAA,EAAoB,CARpB;;IAUA,YAAA,EAAoB,EAVpB;IAWA,SAAA,EAAoB,OAXpB;IAYA,QAAA,EAAoB,CAAC,GAAD,GAAO,OAZ3B;IAaA,SAAA,EAAoB,CAAC,GAAD,GAAO;EAb3B,EA5DF;;;EA4EA,OAAS,CAAA,OAAA,CAAT,GAAqB,OAAA,GAAU,OA5E/B;;;;;EAiFA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAE,QAAF,CAAA;AACN,QAAA,CAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,UAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,QAAA,EAAA,cAAA,EAAA,eAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,aAAA,EAAA,KAAA,EAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAAA,WAAA,EAAA,MAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,CAAA,EAAA;IAAA,YAAA,GAAkB,QAAU,CAAA,cAAA,EAA5B;;IAEA,MAAA,GAAkB,CAAA;IAClB,WAAA,GAAkB;IAClB,MAAA,GAAkB,IAAI,SAAJ,CAAA;IAClB,MAAA,GAAkB,KAAK,CAAC,aAAN,CAAoB;MAAA,KAAA,EAAO;IAAP,CAApB;IAClB,QAAA,GAAkB;IAClB,QAAA,GAAkB;IAClB,cAAA,GAAkB;IAClB,eAAA,GAAkB;IAClB,OAAA,GAAkB,CAAC;IACnB,OAAA,GAAkB,CAAC;IACnB,SAAA,GAAkB,QAAU,CAAA,WAAA;IAC5B,UAAA,GAAkB,OAAS,CAAA,YAAA;IAC3B,IAAA,CAAK,CAAA,uBAAA,CAAA,CAA0B,GAAA,CAAI,SAAJ,CAA1B,CAAA,CAAL,EAdA;;IAgBA,KAAA,8CAAA;;MACE,aAAA,GAAoB,CAAC;MACrB,aAAA,GAAoB,CAAC;MACrB,iBAAA,GAAoB;MACpB,QAAA,GAAoB,IAAI,CAAC,QAAL,CAAc,KAAd;MACpB,IAAA,GAAoB,IAAC,CAAA,gBAAD,CAAkB,KAAlB;MACpB,MAAA,GAAoB,EAAE,CAAC,YAAH,CAAgB,KAAhB,EAAuB;QAAA,QAAA,EAAU;MAAV,CAAvB;MACpB,GAAA,GAAoB,MAAM,CAAC,eAAP,CAAwB,MAAxB,EAAgC,iBAAhC;MACpB,KAAA,GAAoB,MAAA,CAAO,QAAP,EAAiB,GAAjB;MACpB,UAAA,GAAoB,KAAK,CAAC;MAC1B,OAAA,CAAQ,CAAA,CAAA,CAAG,QAAH,CAAY,QAAZ,CAAA,CAAsB,KAAK,CAAC,MAA5B,CAAmC,SAAnC,CAAR,EATA;;MAWA,KAAA,yCAAA;wBAAA;;QAEE,IAAG,sDAAA,IAAmD,SAAS,CAAC,MAAV,GAAmB,CAAzE;UACE,KAAA,GAAgB,SAAS,CAAC,KAAV,CAAgB,wCAAhB;UAChB,IAAoE,aAApE;YAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,SAAJ,CAA7B,CAAA,CAAV,EAAN;;UACA,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAA,GAAgB;UAChB,CAAA,GAAgB,UAAA,CAAW,CAAX,EAAc,EAAd;UAChB,CAAA,GAAgB,UAAA,CAAW,CAAX,EAAc,EAAd;UAChB,QAAQ,CAAC,MAAT,CAAgB,CAAhB;UACA,QAAQ,CAAC,MAAT,CAAgB,CAAhB;UACA,SAAA,GAAgB,CAAE,WAAF,EAAe,CAAf,EAAkB,CAAlB,EARlB;SAAA,MAAA;;UAWE,SAAA,GAAgB,KAXlB;SAAA;;QAaA,IAAA,GAAgB,CAAE,IAAI,OAAJ,CAAY,IAAI,CAAC,YAAL,CAAkB,GAAlB,CAAZ,CAAF,CAAqC,CAAC,GAAtC,CAAA;QAChB,IAAoE,iBAApE;UAAA,IAAA,GAAgB,IAAI,CAAC,SAAL,CAAgB,SAAW,CAAA,CAAA,CAA3B,EAAiC,SAAW,CAAA,CAAA,CAA5C,EAAhB;;QACA,IAAmE,kBAAnE;UAAA,IAAA,GAAgB,IAAI,CAAC,SAAL,CAAe,UAAY,CAAA,CAAA,CAA3B,EAAgC,UAAY,CAAA,CAAA,CAA5C,EAAhB;;QACA,MAAA,GAAgB,IAAC,CAAA,yBAAD,CAA2B,IAA3B;QAChB,CAAE,CAAF,EAAK,CAAL,CAAA,GAAgB;QAChB,CAAA,IAAgB,OAAS,CAAA,QAAA,CAAY,CAAA,CAAA;QACrC,CAAA,IAAgB,OAAS,CAAA,QAAA,CAAY,CAAA,CAAA;QACrC,GAAA,GAAgB,IAAI,CAAC,KAAL,CAAW,CAAA,GAAI,OAAS,CAAA,QAAA,CAAxB;QAChB,GAAA,GAAgB,IAAI,CAAC,KAAL,CAAW,CAAA,GAAI,OAAS,CAAA,QAAA,CAAxB;QAChB,WAAA,cAAgB,MAAO,OAAS,CAAA,cAAA;QAChC,UAAA,GAAgB,GAAA,GAAM;QACtB,GAAA,GAAgB,IAAA,GAAO,UAAA,GAAa,OAAS,CAAA,YAAA,CAA7B,GAA8C;QAC9D,EAAA,GAAgB,CAAE,CAAE,GAAA,GAAM,OAAS,CAAA,QAAA,CAAjB,CAAF,GAAkC,OAAS,CAAA,QAAA,CAAY,CAAA,CAAA;QACvE,EAAA,GAAgB,CAAE,CAAE,GAAA,GAAM,OAAS,CAAA,QAAA,CAAjB,CAAF,GAAkC,OAAS,CAAA,QAAA,CAAY,CAAA,CAAA,EA1BvE;;QA4BA,IAAA,GAAgB,IACd,CAAC,SADa,CACF,EADE,EACE,EADF,CAEd,CAAC,KAFa,CAEF,CAFE,EAEC,CAAC,CAFF,CAGd,CAAC,SAHa,CAGF,CAHE,EAGC,OAAS,CAAA,QAAA,CAHV,CAId,CAAC,KAJa,CAIF,OAAS,CAAA,OAAA,CAJP,CAKd,CAAC,KALa,CAKF,CALE,EA5BhB;;QAmCA,IAAG,GAAA,GAAM,IAAT;UACE,MAAA,GAAqB,gBAAH,GAAkB,KAAlB,GAA6B;UAC/C,QAAA,GAAkB;UAClB,eAAA,GAAkB;UAClB,OAAA,CAAQ,CAAA,CAAA,CAAG,QAAH,CAAY,EAAZ,CAAA,CAAgB,MAAhB,CAAuB,iBAAvB,CAAR,EAJF;SAAA,MAAA;;UAOE,OAAA,GAAgB,IAAI,CAAC,GAAL,CAAe,OAAf,EAAwB,GAAxB;UAChB,OAAA,GAAgB,IAAI,CAAC,GAAL,CAAe,OAAf,EAAwB,GAAxB;UAChB,aAAA,GAAgB,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,GAAxB;UAChB,aAAA,GAAgB,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,GAAxB;UAChB,IAAG,mBAAH;YACE,IAAA,CAAK,CAAA,CAAA,CAAG,QAAH,CAAY,mBAAZ,CAAA,CAAiC,GAAG,CAAC,QAAJ,CAAa,EAAb,CAAjC,CAAA,CAAL,EADF;WAAA,MAAA;YAGE,MAAQ,CAAA,GAAA,CAAR,GAAsB,CAAE,GAAF,EAAO,IAAP;YACtB,WAAA,IAAsB;YACtB,iBAAA,IAAsB,EALxB;WAXF;;MArCF,CAXA;;MAkEA,IAAG,iBAAA,GAAoB,CAAvB;QACE,WAAA,GAAc,IAAA,GAAO,aAAa,CAAC,QAAd,CAAuB,EAAvB;QACrB,WAAA,GAAc,IAAA,GAAO,aAAa,CAAC,QAAd,CAAuB,EAAvB;QACrB,IAAA,CAAK,CAAA,CAAA,CAAG,QAAH,CAAY,QAAZ,CAAA,CAAsB,iBAAtB,CAAwC,qBAAxC,CAAA,CAA+D,WAA/D,CAA2E,IAA3E,CAAA,CAAiF,WAAjF,CAA6F,EAA7F,CAAL,EAHF;OAAA,MAAA;QAKE,IAAA,CAAK,CAAA,CAAA,CAAG,QAAH,CAAY,iBAAZ,CAAL,EALF;;IAnEF,CAhBA;;IA0FA,IAAG,WAAA,KAAe,CAAlB;MACE,IAAA,CAAK,8BAAL;MACA,OAAO,CAAC,IAAR,CAAa,CAAb,EAFF;KA1FA;;IA8FA,KAAW,6GAAX;MACE,IAAO,mBAAP;QACE,MAAQ,CAAA,GAAA,CAAR,GAAkB,CAAE,GAAF,EAAO,QAAP;QAClB,cAAA,IAAkB,EAFpB;;IADF;IAIA,IAAG,cAAA,GAAiB,CAApB;MACE,OAAA,CAAQ,CAAA,OAAA,CAAA,CAAU,cAAV,CAAyB,sCAAzB,CAAA,CAAiE,eAAjE,CAAA,CAAR,EADF;;IAEA,WAAA,GAAc,IAAA,GAAO,OAAO,CAAC,QAAR,CAAiB,EAAjB;IACrB,WAAA,GAAc,IAAA,GAAO,OAAO,CAAC,QAAR,CAAiB,EAAjB;IACrB,IAAA,CAAK,CAAA,MAAA,CAAA,CAAS,WAAT,CAAqB,qBAArB,CAAA,CAA4C,WAA5C,CAAwD,IAAxD,CAAA,CAA8D,WAA9D,CAA0E,EAA1E,CAAL,EAtGA;;IAwGA,MAAA;;AAAiB;MAAA,KAAA,WAAA;;qBAAN;MAAM,CAAA;;;IACjB,MAAM,CAAC,IAAP,CAAY,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;MACV,IAAa,CAAG,CAAA,CAAA,CAAH,GAAS,CAAG,CAAA,CAAA,CAAzB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAG,CAAA,CAAA,CAAH,GAAS,CAAG,CAAA,CAAA,CAAzB;AAAA,eAAO,CAAC,EAAR;;AACA,aAAQ;IAHE,CAAZ,EAzGA;;IA8GA,OAAA,GAAU,IAAC,CAAA,4BAAD,CAA8B,SAA9B,EAAyC,MAAzC;AACV,WAAO,IAAC,CAAA,UAAD,CAAY,OAAZ,EAAqB,QAArB;EAhHD,EAjFR;;;EAoMA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,OAAF,EAAW,QAAX,CAAA;AACZ,QAAA;IAAA,YAAA,GAAgB,QAAU,CAAA,cAAA,EAA1B;;IAEA,EAAE,CAAC,aAAH,CAAiB,YAAjB,EAA+B,IAAI,MAAM,CAAC,IAAX,CAAgB,CAAE,OAAA,CAAQ,OAAR,CAAF,CAAmB,CAAC,MAApC,CAA/B;WACA,IAAA,CAAK,CAAA,kBAAA,CAAA,CAAqB,YAArB,CAAA,CAAL;EAJY,EApMd;;;;;EA8MA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAE,IAAF,CAAA;AAC3B,WAAO,IAAC,CAAA,2BAAD,CAA6B,IAAC,CAAA,yBAAD,CAA2B,IAA3B,CAA7B;EADoB,EA9M7B;;;EAkNA,IAAC,CAAA,2BAAD,GAA+B,QAAA,CAAE,IAAF,CAAA;AAC7B,QAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA;IAAA,UAAA,GAAc,IAAI,CAAC;IACnB,KAAA,GAAc;IACd,KAAA,GAAc;IACd,KAAA,sCAAA;MAAI,CAAE,CAAF,EAAK,CAAL;MACF,IAAA,CAAA,CAAwD,WAAA,IAAO,WAA/D,CAAA;QAAA,MAAM,IAAI,KAAJ,CAAU,gCAAV,EAAN;;MACA,KAAA,IAAS,EADT;MAEA,KAAA,IAAS,EAHX;IAAA;AAIA,WAAO,CAAE,KAAA,GAAQ,UAAV,EAAsB,KAAA,GAAQ,UAA9B;EARsB,EAlN/B;;;EA6NA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAE,IAAF,CAAA;AAC3B,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA;IAAA,CAAA,GAAI;AAEJ;;IAAA,KAAA,qCAAA;;MACE,CAAE,OAAF,EAAW,GAAA,EAAX,CAAA,GAAsB;MAGtB,IAAY,QAAQ,CAAC,IAAT,CAAc,OAAd,CAAZ;;;AAAA,iBAAA;;MAGA,IAAA,CAA4E,eAAe,CAAC,IAAhB,CAAqB,OAArB,CAA5E;;;QAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,gBAAA,CAAA,CAAmB,GAAA,CAAI,OAAJ,CAAnB,CAA+B,SAA/B,CAAA,CAA0C,GAAA,CAAI,IAAJ,CAA1C,CAAA,CAAV,EAAN;OANA;;AAQA,cAAO,OAAP;;AAAA,aAEO,GAFP;UAGI,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,CAAE,EAAI,CAAA,CAAA,CAAN,EAAW,MAAX;UACZ,CAAC,CAAC,IAAF,CAAO,CAAE,CAAF,EAAK,CAAL,CAAP;AAFG;;AAFP,aAMO,GANP;UAOI,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,CAAE,MAAF,EAAU,EAAI,CAAA,CAAA,CAAd;UACZ,CAAC,CAAC,IAAF,CAAO,CAAE,CAAF,EAAK,CAAL,CAAP;AAFG;;AANP,aAUO,GAVP;AAAA,aAUY,GAVZ;UAWI,KAAW,sDAAX;YACE,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,CAAE,EAAI,CAAA,GAAA,CAAN,EAAa,EAAI,CAAA,GAAA,GAAM,CAAN,CAAjB;YACZ,CAAC,CAAC,IAAF,CAAO,CAAE,CAAF,EAAK,CAAL,CAAP;UAFF;AADQ;;AAVZ,aAeO,GAfP;UAgBI,KAAW,sDAAX;YACE,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,CAAE,EAAI,CAAA,GAAA,GAAM,CAAN,CAAN,EAAiB,EAAI,CAAA,GAAA,GAAM,CAAN,CAArB;YACZ,CAAC,CAAC,IAAF,CAAO,CAAE,CAAF,EAAK,CAAL,CAAP;UAFF;AADG;;AAfP,aAoBO,GApBP;UAqBI,KAAW,sDAAX;YACE,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,CAAE,EAAI,CAAA,GAAA,GAAM,CAAN,CAAN,EAAiB,EAAI,CAAA,GAAA,GAAM,CAAN,CAArB;YACZ,CAAC,CAAC,IAAF,CAAO,CAAE,CAAF,EAAK,CAAL,CAAP;UAFF;AADG;;AApBP,aAyBO,GAzBP;UA0BI,IAAA,CAAK,GAAA,CAAI,IAAJ,CAAL;UACA,MAAM,IAAI,KAAJ,CAAU,0VAAV;AA3BV;;UAoCI,IAAA,CAAK,GAAA,CAAI,IAAJ,CAAL;UACA,MAAM,IAAI,KAAJ,CAAU,CAAA,gBAAA,CAAA,CAAmB,GAAA,CAAI,OAAJ,CAAnB,CAA+B,QAA/B,CAAV;AArCV,OARA;;;;;MAkDA,MAAA,GAAS;MACT,MAAA,GAAS;IApDX,CAFA;;AAwDA,WAAO;EAzDoB,EA7N7B;;;;;EA2RA,CAAC,CAAC,GAAF,GAAQ,QAAA,CAAA,GAAE,CAAF,CAAA;AACN,QAAA;IAAA,CAAA,GACE;MAAA,OAAA,EAAgB;IAAhB;AACF,WAAO,CAAC,CAAC,GAAF,CAAM,KAAN,EAAa,CAAb,EAAgB,GAAA,CAAhB;EAHD,EA3RR;;;;;;EAoSA,CAAC,CAAC,IAAF,GAAS,QAAA,CAAA,GAAE,CAAF,CAAA;AACP,WAAO,CAAC,CAAC,GAAF,CAAM,MAAN,EAAc,GAAA,CAAd;EADA,EApST;;;EAwSA,CAAC,CAAC,IAAF,GAAS,QAAA,CAAE,SAAF,EAAA,GAAa,CAAb,CAAA;AACP,QAAA;IAAA,CAAA,GACE;MAAA,IAAA,EAAkB,SAAlB;MACA,aAAA,EAAkB,OAAS,CAAA,QAAA,CAAT,GAAsB,OAAS,CAAA,OAAA;IADjD,EADF;;;;;;AAQA,WAAO,CAAC,CAAC,GAAF,CAAM,MAAN,EAAc,CAAd,EAAiB,GAAA,CAAjB;EATA,EAxST;;;EAoTA,CAAC,CAAC,SAAF,GAAc,QAAA,CAAE,WAAF,CAAA;AACZ,QAAA;IAAA,CAAA,GACE;MAAA,aAAA,EAAkB,WAAlB;MACA,cAAA,EAAkB,OAAS,CAAA,QAAA,CAAT,GAAsB,OAAS,CAAA,OAAA,CADjD;;MAGA,QAAA,EAAkB,OAAS,CAAA,QAAA,CAH3B;MAIA,SAAA,EAAkB,OAAS,CAAA,SAAA;IAJ3B,EADF;;;AAQA,WAAO,CAAC,CAAC,GAAF,CAAM,CAAE,CAAC,CAAC,MAAF,CAAS,CAAA,CAAA,GAAA;aAAG,CAAC,CAAC,GAAF,CAAM,WAAN,EAAmB,CAAnB;IAAH,CAAT,CAAF,CAAoC,CAAC,OAArC,CAA6C,iBAA7C,EAAgE,KAAhE,CAAN;EATK,EApTd;;;EAgUA,CAAC,CAAC,KAAF,GAAU,QAAA,CAAE,GAAF,EAAO,IAAP,CAAA;AACR,QAAA;IAAA,CAAA,GAEE,CAAA;;MAAA,OAAA,EAAU,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAV;MACA,CAAA,EAAU,CAAC,CAAC,SAAF,CAAY,IAAZ;IADV;AAEF,WAAO,CAAC,CAAC,GAAF,CAAM,OAAN,EAAe,CAAf;EALC,EAhUV;;;EAwUA,CAAC,CAAC,MAAF,GAAW,QAAA,CAAE,EAAF,EAAM,IAAI,EAAV,CAAA;AACT,WAAO,CAAC,CAAC,GAAF,CAAM,QAAN,EAAgB;MAAA,EAAA,EAAI,EAAI,CAAA,CAAA,CAAR;MAAa,EAAA,EAAI,EAAI,CAAA,CAAA,CAArB;MAA0B,CAAA,EAAG,CAA7B;MAAgC,IAAA,EAAM;IAAtC,CAAhB;EADE,EAxUX;;;EA4UA,CAAC,CAAC,SAAF,GAAc,QAAA,CAAE,IAAF,CAAA;AACZ,QAAA;AAAA,WAAO;;AAA8B;AAAA;MAAA,KAAA,qCAAA;;qBAA5B,CAAG,CAAA,CAAA,CAAH,GAAS,CAAG,SAAM,CAAC,IAAV,CAAe,GAAf;MAAmB,CAAA;;QAA9B,CAA2D,CAAC,IAA5D,CAAiE,GAAjE;EADK,EA5Ud;;;EAgVA,CAAC,CAAC,IAAF,GAAS,QAAA,CAAE,IAAF,CAAA;AACP,QAAA;IAAA,QAAA,GAAW,CAAC,CAAC,SAAF,CAAY,IAAZ;AACX,WAAO,CAAC,CAAC,GAAF,CAAM,MAAN,EAAc;MAAA,CAAA,EAAG,QAAH;MAAa,IAAA,EAAM;IAAnB,CAAd;EAFA,EAhVT;;;EAqVA,IAAC,CAAA,4BAAD,GAAgC,QAAA,CAAE,SAAF,EAAa,MAAb,CAAA;AAC9B,WAAO,CAAC,CAAC,MAAF,CAAS,CAAA,CAAA,GAAA,EAAA;;MAEd,CAAC,CAAC,GAAF,CAAM,8CAAN,EAAA;;MAEA,CAAC,CAAC,GAAF,CAAM,2GAAN;aACA,CAAC,CAAC,GAAF,CAAM,CAAA,CAAA,GAAA;QACJ,CAAC,CAAC,IAAF,CAAO,IAAP;QACA,CAAC,CAAC,IAAF,CAAO,CAAA,CAAA,GAAA;UACL,CAAC,CAAC,IAAF,CAAO,IAAP;UACA,CAAC,CAAC,IAAF,CAAO,SAAP,EAAkB,CAAA,CAAA,GAAA;AAChB,gBAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;YAAA,CAAC,CAAC,IAAF,CAAO,IAAP;YACA,CAAC,CAAC,SAAF,CAAY,SAAZ;YACA,CAAC,CAAC,IAAF,CAAO,IAAP;AACA;YAAA,KAAA,wCAAA;cAAI,CAAE,GAAF,EAAO,IAAP;cACF,CAAC,CAAC,GAAF,CAAM,CAAA,KAAA,CAAA,CAAQ,GAAG,CAAC,QAAJ,CAAa,EAAb,CAAR,CAAwB,IAAxB,CAAN;cACA,CAAC,CAAC,KAAF,CAAQ,GAAR,EAAa,IAAb;2BACA,CAAC,CAAC,IAAF,CAAO,IAAP;YAHF,CAAA;;UAJgB,CAAlB;iBAQA,CAAC,CAAC,IAAF,CAAO,IAAP;QAVK,CAAP;eAWA,CAAC,CAAC,IAAF,CAAO,IAAP;MAbI,CAAN;IALc,CAAT,EAAP;;AAqBA,WAAO;EAtBuB,EArVhC;;;;;EAiXA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,WAAF,CAAA;AACnB,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAA,CAAA,GACE;MAAA,WAAA,EAAsB,WAAa,CAAA,SAAA,CAAnC;MACA,cAAA,EAAsB,WAAa,CAAA,gBAAA,CADnC;MAEA,eAAA,EAAsB,WAAa,CAAA,iBAAA,CAFnC;MAGA,iBAAA,EAAsB,WAAa,CAAA,mBAAA,CAHnC;MAIA,WAAA,EAAsB,WAAa,CAAA,aAAA,CAJnC;MAKA,kBAAA,EAAsB,WAAa,CAAA,oBAAA;IALnC;IAMF,IAAC,CAAA,iBAAD,CAAmB,CAAnB;IACA,IAAC,CAAA,iBAAD,CAAmB,CAAnB;AAEA;;;;;;;;;IAAA,KAAA,qCAAA;;MACE,OAAA,CAAU,CAAE,IAAA,GAAO,GAAT,CAAc,CAAC,MAAf,CAAsB,EAAtB,CAAV,EAAsC,GAAA,CAAI,CAAG,CAAA,IAAA,CAAP,CAAtC;IADF,CAVA;;AAaA,WAAO;EAdY,EAjXrB;;;EAkYA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,QAAF,CAAA;AACnB,QAAA,CAAA,EAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA;IAAA,aAAA,GAAoB,QAAU,CAAA,eAAA;IAC9B,MAAA,GAAoB,QAAU,CAAA,kBAAA;IAC9B,SAAA,GAAoB,QAAU,CAAA,WAAA,EAF9B;;AAIA,YAAO,aAAP;AAAA,WACO,KADP;QAEI,SAAA,GAAY,QAAU,CAAA,kBAAA,CAAV,GAAiC;AAD1C;AADP;QAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,6BAAA,CAAA,CAAgC,GAAA,CAAI,aAAJ,CAAhC,CAAA,CAAV;AAHb,KAJA;;IASA,CAAA,GAAI,QAAU,CAAA,cAAA,CAAV,GAA6B,IAAC,CAAA,YAAD,CAAc,MAAd,EAAsB,CAAA,CAAA,CAAG,SAAH,CAAa,CAAb,CAAA,CAAgB,SAAhB,CAAA,CAAtB;IACjC,IAAG,CAAE,CAAI,QAAU,CAAA,WAAA,CAAhB,CAAA,IAAoC,EAAE,CAAC,UAAH,CAAc,CAAd,CAAvC;MACE,IAAA,CAAK,CAAA,uBAAA,CAAA,CAA0B,CAA1B,CAAA,CAAL;MACA,IAAA,CAAK,QAAL;MACA,IAAA,CAAK,wBAAL;MACA,IAAA,CAAK,4BAAL;MACA,IAAA,CAAK,4BAAL;MACA,MAAM,IAAI,KAAJ,CAAU,eAAV,EANR;;EAXmB,EAlYrB;;;EAsZA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,QAAF,CAAA;AACnB,QAAA,CAAA,EAAA,SAAA,EAAA,SAAA,EAAA,eAAA,EAAA,YAAA,EAAA,SAAA,EAAA;IAAA,YAAA,GAAoB,QAAU,CAAA,cAAA;IAC9B,eAAA,GAAoB,QAAU,CAAA,iBAAA;IAC9B,SAAA,GAAoB,QAAU,CAAA,WAAA,EAF9B;;AAIA,YAAO,YAAP;AAAA,WACO,KADP;AAAA,WACc,SADd;QAEI,SAAA,GAAY,QAAU,CAAA,iBAAA,CAAV,GAAgC;AADlC;AADd;QAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,4BAAA,CAAA,CAA+B,GAAA,CAAI,YAAJ,CAA/B,CAAA,CAAV;AAHb,KAJA;;IASA,SAAA,GAAc,CAAA,CAAA,CAAG,SAAH,CAAa,aAAb,CAAA,CAA4B,SAA5B,CAAA;IACd,UAAA,GAAc,QAAU,CAAA,YAAA,CAAV,GAA8B,IAAC,CAAA,YAAD,CAAc,eAAd,EAA+B,SAA/B;IAC5C,CAAA,GAAc,QAAU,CAAA,cAAA,CAAV,GAA8B,IAAI,CAAC,IAAL,CAAU,UAAV;AAC5C,WAAO;EAbY,EAtZrB;;;EAsaA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,KAAF,CAAA;AACvB,QAAA,CAAA,EAAA;IAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAY,2BAAZ;IACR,IAAO,aAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,sBAAA,CAAA,CAAyB,GAAA,CAAI,KAAJ,CAAzB,CAAA,CAAV,EADR;;IAEA,CAAA,GAAI,KAAO,CAAA,CAAA;IACX,IAAA,CAAA,CAAO,CAAC,CAAC,MAAF,GAAW,CAAlB,CAAA;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,2BAAA,CAAA,CAA8B,GAAA,CAAI,KAAJ,CAA9B,CAAA,CAAV,EADR;;AAEA,WAAO;EAPgB,EAtazB;;;EAgbA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,KAAF,CAAA;AAClB,QAAA,CAAA,EAAA;IAAA,KAAA,GAAQ,KAAK,CAAC,KAAN,CAAY,oBAAZ;IACR,IAAO,aAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,sBAAA,CAAA,CAAyB,GAAA,CAAI,KAAJ,CAAzB,CAAA,CAAV,EADR;;IAEA,CAAA,GAAI,QAAA,CAAS,KAAO,CAAA,CAAA,CAAhB,EAAqB,EAArB;IACJ,IAAA,CAAA,CAAO,CAAA,MAAA,IAAU,CAAV,IAAU,CAAV,IAAe,QAAf,CAAP,CAAA;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,qBAAA,CAAA,CAAwB,GAAA,CAAI,KAAJ,CAAxB,CAAA,CAAV,EADR;;AAEA,WAAO;EAPW,EAhbpB;;;;;EA6bA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAA,CAAA;AACN,QAAA,CAAA,EAAA;IAAA,CAAA,GAAI;IACJ,IAAA,GAAO,IAAI,OAAJ,CAAY,CAAZ,CACL,CAAC,KADI,CACE,GADF,CAEL,CAAC,SAFI,CAEM,GAFN,EAEW,GAFX,CAGL,CAAC,GAHI,CAAA,CAIL,CAAC,KAJI,CAIE,CAJF,EADP;;;;IASA,KAAA,CAAM,IAAI,CAAC,SAAL,CAAe,IAAf,CAAN,EATA;;IAWA,IAAA,CAAK,IAAC,CAAA,yBAAD,CAA2B,IAA3B,CAAL;IACA,IAAA,CAAK,IAAC,CAAA,yBAAD,CAA2B,IAA3B,CAAL;WACA,KAAA,CAAM,IAAC,CAAA,CAAD,CAAG,IAAH,CAAN;EAdM,EA7bR;;;EA8cA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,OAAO,CAAC,GAAR,CAAA,CAAb,EAA4B,IAAI,CAAC,IAAL,CAAU,GAAA,CAAV,CAA5B;EAAZ,EA9chB;;;EAkdA,IAAO,qBAAP;IAA8B,CAAA,CAAA,CAAA,GAAA;AAC5B,UAAA,WAAA,EAAA,MAAA,EAAA,KAAA,EAAA;MAAA,MAAA,GAAY,CAAE,OAAA,CAAQ,mBAAR,CAAF,CAA+B,CAAC,OAA5C;;MAEA,OAAA,GAAY,CAAE,OAAA,CAAQ,iBAAR,CAAF,CAA+B,CAAA,SAAA,EAF3C;;;;;MAOA,KAAA,GAAY,gkCAPZ;;MAoCA,WAAA,GAAc,MAAA,CAAO,KAAP,EAAc;QAAA,OAAA,EAAS,OAAT;QAAkB,IAAA,EAAM,QAAA,CAAE,IAAF,EAAQ,SAAR,CAAA,EAAA;;;iBAGlD,IAAA,CAAK,IAAA,GAAO,KAAZ;QAHkD;MAAxB,CAAd,EApCd;;MAyCA,IAAG,mBAAH;eACE,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,iBAAD,CAAmB,WAAnB,CAAN,EADF;;IA1C4B,CAAA,CAAH,CAAA,EAA3B;;AAldA",
  "sourcesContent": [
    "\n    # \"coffee-script\": \"^1.8.0\",\n    # \"coffeenode-chr\": \"^0.1.3\",\n    # \"coffeenode-teacup\": \"0.0.17\",\n    # \"coffeenode-CND\": \"^0.1.20\",\n    # \"glob\": \"^4.0.6\",\n    # \"svgpath\": \"~ 1.0.0\",\n    # \"xmldom-silent\": \"~ 0.1.16\",\n    # \"xpath\": \"0.0.7\"\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nCHR                       = require 'coffeenode-chr'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'SVGTTF/main'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nDOMParser                 = ( require 'xmldom-silent' ).DOMParser\nxpath                     = require 'xpath'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nSvgPath                   = require 'svgpath'\n#...........................................................................................................\n### https://github.com/loveencounterflow/coffeenode-teacup ###\nT                         = require 'coffeenode-teacup'\n#...........................................................................................................\n### https://github.com/isaacs/node-glob ###\nglob                      = require 'glob'\n#...........................................................................................................\n### https://github.com/fontello/svg2ttf ###\nsvg2ttf                   = require 'svg2ttf'\n\n\n#===========================================================================================================\n# OPTIONS\n#-----------------------------------------------------------------------------------------------------------\nmodule    = 36\nem_size   = 4096\noptions =\n  ### Coordinates of first glyph outline: ###\n  'offset':           [ module * 4, module * 4, ]\n  ### Ad hoc correction: ###\n  'correction':       [ 0, module * 0.075, ]\n  ### Size of grid and font design size: ###\n  'module':           module\n  # 'scale':            256 / module\n  # 'scale':            1024 / module\n  ### Number of glyph rows between two rulers plus one: ###\n  'block-height':     9\n  ### CID of first glyph outline: ###\n  'row-length':       16\n  'em-size':          em_size\n  'ascent':           +0.8 * em_size\n  'descent':          -0.2 * em_size\n\n#...........................................................................................................\noptions[ 'scale' ] = em_size / module\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@main = ( settings ) ->\n  input_routes    = settings[ 'input-routes' ]\n  # debug settings\n  glyphs          = {}\n  glyph_count     = 0\n  parser          = new DOMParser()\n  select          = xpath.useNamespaces 'SVG': 'http://www.w3.org/2000/svg'\n  selector        = '//SVG:svg/SVG:path'\n  fallback        = null\n  fallback_count  = 0\n  fallback_source = null\n  min_cid         = +Infinity\n  max_cid         = -Infinity\n  font_name       = settings[ 'font-name' ]\n  correction      = options[ 'correction' ]\n  info \"reading files for font #{rpr font_name}\"\n  #.........................................................................................................\n  for route in input_routes\n    local_min_cid     = +Infinity\n    local_max_cid     = -Infinity\n    local_glyph_count = 0\n    filename          = PATH.basename route\n    cid0              = @_cid0_from_route route\n    source            = FS.readFileSync route, encoding: 'utf-8'\n    doc               = parser.parseFromString( source, 'application/xml' )\n    paths             = select selector, doc\n    path_count        = paths.length\n    whisper \"#{filename}: found #{paths.length} outlines\"\n    #.......................................................................................................\n    for path in paths\n      #.....................................................................................................\n      if ( transform = path.getAttribute 'transform' )? and transform.length > 0\n        match         = transform.match /^translate\\(([-+.0-9]+),([-+.0-9]+)\\)$/\n        throw new Error \"unable to parse transform #{rpr transform}\" unless match?\n        [ _, x, y, ]  = match\n        x             = parseFloat x, 10\n        y             = parseFloat y, 10\n        validate.number x\n        validate.number y\n        transform     = [ 'translate', x, y ]\n      #.....................................................................................................\n      else\n        transform     = null\n      #.....................................................................................................\n      path          = ( new SvgPath path.getAttribute 'd' ).abs()\n      path          = path.translate  transform[ 1 ],  transform[ 2 ] if  transform?\n      path          = path.translate correction[ 0 ], correction[ 1 ] if correction?\n      center        = @center_from_absolute_path path\n      [ x, y, ]     = center\n      x            -= options[ 'offset' ][ 0 ]\n      y            -= options[ 'offset' ][ 1 ]\n      col           = Math.floor x / options[ 'module' ]\n      row           = Math.floor y / options[ 'module' ]\n      block_count   = row // options[ 'block-height' ]\n      actual_row    = row - block_count\n      cid           = cid0 + actual_row * options[ 'row-length' ] + col\n      dx            = - ( col * options[ 'module' ] ) - options[ 'offset' ][ 0 ]\n      dy            = - ( row * options[ 'module' ] ) - options[ 'offset' ][ 1 ]\n      #.....................................................................................................\n      path          = path\n        .translate  dx, dy\n        .scale      1, -1\n        .translate  0, options[ 'module' ]\n        .scale      options[ 'scale' ]\n        .round      0\n      #.....................................................................................................\n      if cid < cid0\n        prefix          = if fallback? then 're-' else ''\n        fallback        = path\n        fallback_source = filename\n        whisper \"#{filename}: #{prefix}assigned fallback\"\n      #.....................................................................................................\n      else\n        min_cid       = Math.min       min_cid, cid\n        max_cid       = Math.max       max_cid, cid\n        local_min_cid = Math.min local_min_cid, cid\n        local_max_cid = Math.max local_max_cid, cid\n        if glyphs[ cid ]?\n          warn \"#{filename}: duplicate CID: 0x#{cid.toString 16}\"\n        else\n          glyphs[ cid ]       = [ cid, path, ]\n          glyph_count        += 1\n          local_glyph_count  += 1\n    #.......................................................................................................\n    if local_glyph_count > 0\n      min_cid_hex = '0x' + local_min_cid.toString 16\n      max_cid_hex = '0x' + local_max_cid.toString 16\n      help \"#{filename}: added #{local_glyph_count} glyph outlines to [ #{min_cid_hex} .. #{max_cid_hex} ]\"\n    else\n      warn \"#{filename}: no glyphs found\"\n  #.........................................................................................................\n  if glyph_count is 0\n    warn \"no glyphs found; terminating\"\n    process.exit 1\n  #.........................................................................................................\n  for cid in [ min_cid .. max_cid ]\n    unless glyphs[ cid ]?\n      glyphs[ cid ]   = [ cid, fallback, ]\n      fallback_count += 1\n  if fallback_count > 0\n    whisper \"filled #{fallback_count} positions with fallback outline from #{fallback_source}\"\n  min_cid_hex = '0x' + min_cid.toString 16\n  max_cid_hex = '0x' + max_cid.toString 16\n  help \"added #{glyph_count} glyph outlines to [ #{min_cid_hex} .. #{max_cid_hex} ]\"\n  #.........................................................................................................\n  glyphs = ( entry for _, entry of glyphs )\n  glyphs.sort ( a, b ) ->\n    return +1 if a[ 0 ] > b[ 0 ]\n    return -1 if a[ 0 ] < b[ 0 ]\n    return  0\n  #.........................................................................................................\n  svgfont = @svgfont_from_name_and_glyphs font_name, glyphs\n  return @_write_ttf svgfont, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_write_ttf = ( svgfont, settings ) ->\n  output_route  = settings[ 'output-route' ]\n  ### svg2ttf has a strange API and returns a buffer that isn't a `Buffer`...  ###\n  FS.writeFileSync output_route, new Buffer.from ( svg2ttf svgfont ).buffer\n  help \"output written to #{output_route}\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@center_from_absolute_path = ( path ) ->\n  return @center_from_absolute_points @points_from_absolute_path path\n\n#-----------------------------------------------------------------------------------------------------------\n@center_from_absolute_points = ( path ) ->\n  node_count  = path.length\n  sum_x       = 0\n  sum_y       = 0\n  for [ x, y, ] in path\n    throw new Error \"found undefined points in path\" unless x? and y?\n    sum_x += x # if x?\n    sum_y += y # if y?\n  return [ sum_x / node_count, sum_y / node_count, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@points_from_absolute_path = ( path ) ->\n  R = []\n  #.........................................................................................................\n  for node in path[ 'segments' ]\n    [ command, xy..., ] = node\n    #.......................................................................................................\n    ### Ignore closepath command: ###\n    continue if /^[zZ]$/.test command\n    #.......................................................................................................\n    # urge '©99052', node\n    throw new Error \"unknown command #{rpr command} in path #{rpr path}\" unless /^[MLHVCSQTA]$/.test command\n    #.......................................................................................................\n    switch command\n      #.....................................................................................................\n      when 'H'\n        [ x, y, ] = [ xy[ 0 ], last_y, ]\n        R.push [ x, y, ]\n      #.....................................................................................................\n      when 'V'\n        [ x, y, ] = [ last_x, xy[ 0 ], ]\n        R.push [ x, y, ]\n      #.....................................................................................................\n      when 'M', 'L'\n        for idx in [ 0 ... xy.length ] by +2\n          [ x, y, ] = [ xy[ idx ], xy[ idx + 1 ], ]\n          R.push [ x, y, ]\n      #.....................................................................................................\n      when 'C'\n        for idx in [ 0 ... xy.length ] by +6\n          [ x, y, ] = [ xy[ idx + 4 ], xy[ idx + 5 ], ]\n          R.push [ x, y, ]\n      #.....................................................................................................\n      when 'S'\n        for idx in [ 0 ... xy.length ] by +4\n          [ x, y, ] = [ xy[ idx + 2 ], xy[ idx + 3 ], ]\n          R.push [ x, y, ]\n      #.....................................................................................................\n      when 'Q'\n        warn rpr path\n        throw new Error \"\"\"\n          quadratic splines (SVG path commands `q` and `Q` not yet supported; in case you're\n          working with Inkscape, identify the offending path and nudge one of its control points\n          slightly and save the document; this will cause Inkscape to convert the outline to a\n          cubic spline.\n\n          see http://inkscape.13.x6.nabble.com/Quadratic-beziers-td2856790.html\"\"\"\n      #.....................................................................................................\n      else\n        warn rpr path\n        throw new Error \"unknown command #{rpr command} in path\"\n        # help [ null, null, ]\n        # [ x, y, ] = [ null, null, ]\n        # R.push [ x, y, ]\n    #.......................................................................................................\n    last_x = x\n    last_y = y\n  #.........................................................................................................\n  return R\n\n#===========================================================================================================\n# SVG GENERATION\n#-----------------------------------------------------------------------------------------------------------\nT.SVG = ( P... ) ->\n  Q =\n    'xmlns':        'http://www.w3.org/2000/svg'\n  return T.TAG 'svg', Q, P...\n\n# <font id=\"icomoon\" horiz-adv-x=\"512\">\n# <font-face units-per-em=\"512\" ascent=\"480\" descent=\"-32\" />\n\n#-----------------------------------------------------------------------------------------------------------\nT.DEFS = ( P... ) ->\n  return T.TAG 'defs', P...\n\n#-----------------------------------------------------------------------------------------------------------\nT.FONT = ( font_name, P... ) ->\n  Q =\n    'id':             font_name\n    'horiz-adv-x':    options[ 'module' ] * options[ 'scale' ]\n    # 'horiz-origin-x':   0\n    # 'horiz-origin-y':   0\n    # 'vert-origin-x':    0\n    # 'vert-origin-y':    0\n    # 'vert-adv-y':       0\n  return T.TAG 'font', Q, P...\n\n#-----------------------------------------------------------------------------------------------------------\nT.FONT_FACE = ( font_family ) ->\n  Q =\n    'font-family':    font_family\n    'units-per-em':   options[ 'module' ] * options[ 'scale' ]\n    ### TAINT probably wrong values ###\n    'ascent':         options[ 'ascent' ]\n    'descent':        options[ 'descent' ]\n  ### TAINT kludge ###\n  # return T.selfClosingTag 'font-face', Q\n  return T.RAW ( T.render => T.TAG 'font-face', Q ).replace /><\\/font-face>$/, ' />'\n\n#-----------------------------------------------------------------------------------------------------------\nT.GLYPH = ( cid, path ) ->\n  Q           =\n    # unicode:  T.TEXT CHR.as_ncr cid\n    unicode:  CHR.as_chr cid\n    d:        T._rpr_path path\n  return T.TAG 'glyph', Q\n\n#-----------------------------------------------------------------------------------------------------------\nT.MARKER = ( xy, r = 10 ) ->\n  return T.TAG 'circle', cx: xy[ 0 ], cy: xy[ 1 ], r: r, fill: '#f00'\n\n#-----------------------------------------------------------------------------------------------------------\nT._rpr_path = ( path ) ->\n  return ( s[ 0 ] + s[ 1 .. ].join ',' for s in path[ 'segments' ] ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\nT.path = ( path ) ->\n  path_txt = T._rpr_path path\n  return T.TAG 'path', d: path_txt, fill: '#000'\n\n#-----------------------------------------------------------------------------------------------------------\n@svgfont_from_name_and_glyphs = ( font_name, glyphs ) ->\n  return T.render =>\n    #.........................................................................................................\n    T.RAW \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n\"\"\"\n    ### must preserve space at end of DOCTYPE declaration ###\n    T.RAW \"\"\"<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >\\n\"\"\"\n    T.SVG =>\n      T.TEXT '\\n'\n      T.DEFS =>\n        T.TEXT '\\n'\n        T.FONT font_name, =>\n          T.TEXT '\\n'\n          T.FONT_FACE font_name\n          T.TEXT '\\n'\n          for [ cid, path, ] in glyphs\n            T.RAW \"<!-- #{cid.toString 16} -->\"\n            T.GLYPH cid, path\n            T.TEXT '\\n'\n        T.TEXT '\\n'\n      T.TEXT '\\n'\n\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\n# HANDLE SETTINGS\n#-----------------------------------------------------------------------------------------------------------\n@_compile_settings = ( cli_options ) ->\n  R =\n    'overwrite':          cli_options[ '--force'            ]\n    'input-format':       cli_options[ '<input-format>'     ]\n    'output-format':      cli_options[ '<output-format>'    ]\n    'input-directory':    cli_options[ '<input-directory>'  ]\n    'font-name':          cli_options[ '<font-name>'        ]\n    'output-directory':   cli_options[ '<output-directory>' ]\n  @_get_input_routes R\n  @_get_output_route R\n  #.........................................................................................................\n  for name in ( name for name of R ).sort()\n    whisper ( ( name + ':' ).padEnd 20 ), rpr R[ name ]\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_output_route = ( settings ) ->\n  output_format     = settings[ 'output-format'     ]\n  output            = settings[ 'output-directory'  ]\n  font_name         = settings[ 'font-name'         ]\n  #.........................................................................................................\n  switch output_format\n    when 'ttf'\n      extension = settings[ 'output-extension' ] = 'ttf'\n    else throw new Error \"output format not supported: #{rpr output_format}\"\n  #.........................................................................................................\n  R = settings[ 'output-route' ] = @_join_routes output, \"#{font_name}.#{extension}\"\n  if ( not settings[ 'overwrite' ] ) and FS.existsSync R\n    warn \"target already exists: #{R}\"\n    help \"either\"\n    help \"  * correct your input\"\n    help \"  * or remove target first\"\n    help \"  * or use the `-f` option\"\n    throw new Error \"target exists\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_input_routes = ( settings ) ->\n  input_format      = settings[ 'input-format'    ]\n  input_directory   = settings[ 'input-directory' ]\n  font_name         = settings[ 'font-name'       ]\n  #.........................................................................................................\n  switch input_format\n    when 'svg', 'svgfont'\n      extension = settings[ 'input-extension' ] = 'svg'\n    else throw new Error \"input format not supported: #{rpr input_format}\"\n  #.........................................................................................................\n  name_glob   = \"#{font_name}-+([0-9a-f]).#{extension}\"\n  route_glob  = settings[ 'input-glob'    ] = @_join_routes input_directory, name_glob\n  R           = settings[ 'input-routes'  ] = glob.sync route_glob\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_font_name_from_route = ( route ) ->\n  match = route.match /([^\\/]+)-[0-9a-f]+?\\.svg$/\n  unless match?\n    throw new Error \"unable to parse route #{rpr route}\"\n  R = match[ 1 ]\n  unless R.length > 0\n    throw new Error \"illegal font name in route #{rpr route}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_cid0_from_route = ( route ) ->\n  match = route.match /-([0-9a-f]+)\\.svg$/\n  unless match?\n    throw new Error \"unable to parse route #{rpr route}\"\n  R = parseInt match[ 1 ], 16\n  unless 0x0000 <= R <= 0x10ffff\n    throw new Error \"illegal CID in route #{rpr route}\"\n  return R\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  d = \"M168,525.89c38,36,48,48,46,81s5,47-46,52 s-88,35-91-27s-21-73,11-92S168,525.89,168,525.89z\"\n  path = new SvgPath d\n    .scale 0.5\n    .translate 100, 200\n    .abs()\n    .round 0\n    # .rel()\n    # .round(1) # Fix js floating point error/garbage after rel()\n    # .toString()\n  debug JSON.stringify path\n  # debug path.toString()\n  help @points_from_absolute_path path\n  help @center_from_absolute_path path\n  debug @f path\n\n#-----------------------------------------------------------------------------------------------------------\n@_join_routes = ( P... ) -> PATH.resolve process.cwd(), PATH.join P...\n\n\n############################################################################################################\nunless module.parent? then do =>\n  docopt    = ( require 'coffeenode-docopt' ).docopt\n  # filename  = ( require 'path' ).basename __filename\n  version   = ( require '../package.json' )[ 'version' ]\n  #.........................................................................................................\n  # Usage: #{filename} svg svgfont <directory> <font-name> [<output>]\n  #        #{filename} svg ttf <directory> <font-name> [<output>]\n  # Usage: svgttf [-f] <input-format> <output-format> <input-directory> <font-name> <output>\n  usage     = \"\"\"\n  Usage: svgttf [-f] <input-directory> <font-name> <input-format> <output-directory> <output-format>\n\n        Currently the only allowed arguments are:\n        <input-format>:     must be `svg`\n        <output-format>:    must be `ttf`\n        <input-directory>:  route to directory with your SVG design sheets\n        <font-name>:        name of your font\n        <output-directory>: directory where output is written to\n\n        Please observe:\n\n        * The structure of your SVG design sheets must follow the guidelines as detailed in the\n          project README.md.\n\n        * Your font files must be named like `myfontname-e100.svg`, `myfontname-e200.svg`, ..., i.e.\n          each filename has the font name first and ends with an indication of the first CID (Unicode\n          codepoint, in hexadecimal) and the filename extension `.svg`.\n\n        * Use `.` (dot) to get a file named `myfontname.ttf` in the current directory.\n\n        * `svgttf` will not overwrite an existing file unless given the `--force` (or `-f`) option.\n\n  Options:\n    -h, --help\n    -v, --version\n    -f, --force\n  \"\"\"\n  #.........................................................................................................\n  cli_options = docopt usage, version: version, help: ( left, collected ) ->\n    # urge left\n    # help collected\n    help '\\n' + usage\n  #.........................................................................................................\n  if cli_options?\n    @main @_compile_settings cli_options\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}