{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/svgttf-next.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'SVGTTF2'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n{ validate\n  type_of\n  isa\n  declare               } = types.export()\nPAPER                     = require 'paper-jsdom'\nSVGO                      = require 'svgo'\nsvg_pathify               = require 'svg_pathify'\nGUY                       = require 'guy'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'constructor_cfg', tests:\n  \"@isa.object x\":                        ( x ) -> @isa.object x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'svgttf_glyf_pathdata_from_svg_cfg', tests:\n  \"@isa.object x\":                        ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.svg\":             ( x ) -> @isa.nonempty_text x.svg\n  \"@isa_optional.nonempty_text x.path\":   ( x ) -> @isa_optional.nonempty_text x.path\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Svgttf2\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      constructor_cfg: {}\n      svgttf_glyf_pathdata_from_svg_cfg:\n        svg:            null\n        path:           '<unknownpath>'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    validate.constructor_cfg @cfg\n    @cfg = GUY.lft.freeze cfg\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  glyf_pathdata_from_svg: ( cfg ) ->\n    validate.svgttf_glyf_pathdata_from_svg_cfg ( cfg = { @constructor.C.defaults.svgttf_glyf_pathdata_from_svg_cfg..., cfg..., } )\n    R             = {}\n    project       = new PAPER.Project()\n    project.importSVG ( @prepare_svg_txt cfg.path, cfg.svg )\n    svg_dom       = project.exportSVG()\n    seen_pathdoms = new Set()\n    #.......................................................................................................\n    ### Iterate over all groups; group IDs are used to differentiate between groups that contain outlines\n    and groups that contain other stuff such as grid. ###\n    for g_dom in svg_dom.querySelectorAll 'g'\n      g_id  = g_dom.getAttribute 'id'\n      continue if ( not g_id? ) or ( not g_id.startsWith 'sym-' )   ### TAINT add to cfg ###\n      sym_name      = g_id.replace /^sym-/, ''                      ### TAINT add to cfg ###\n      entry         = { sym_name, }\n      R[ sym_name ] = entry\n      pds           = []\n      # debug '^432-3^', { g_id, }\n      # info '^432-4^', \"group\", rpr g_id\n      for path_dom in g_dom.querySelectorAll 'path'\n        continue if seen_pathdoms.has path_dom\n        seen_pathdoms.add path_dom\n        path_id = path_dom.getAttribute 'id'\n        # debug '^432-5^', { path_id, }\n        if path_id.endsWith '-glyfmetric'\n          pd          = path_dom.getAttribute 'd'\n          bbox        = @_boundingbox_from_pathdata pd\n          entry.shift = { x: bbox.x1, }\n        else\n          pds.push path_dom.getAttribute 'd'\n      # urge '^432-7^', pds\n      if pds.length is 0\n        warn \"found no paths for group #{rpr path_id}\"\n        continue\n      entry.pd = @_unite_path_data pds\n      entry.pd = @_shift_pathdata entry.pd, entry.shift if ( entry.shift?.x ? 0 ) != 0\n    #.......................................................................................................\n    for path_dom in svg_dom.querySelectorAll 'path'\n      continue if seen_pathdoms.has path_dom\n      path_id   = path_dom.getAttribute 'id'\n      continue unless path_id?\n      continue unless path_id.startsWith 'sym-'\n      sym_name  = path_id.replace /^sym-/, ''\n      pd        = path_dom.getAttribute 'd'\n      R.push { sym_name, pd, }\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_svg_txt: ( path, svg_txt ) ->\n    cfg =\n      path:       path\n      pretty:     true\n      multipass:  true\n      plugins: [\n        # 'preset-default'\n        'cleanupAttrs'                    # cleanup attributes from newlines, trailing, and repeating spaces  enabled\n        'mergeStyles'                     # merge multiple style elements into one  enabled\n        'inlineStyles'                    # move and merge styles from <style> elements to element style attributes enabled\n        'removeDoctype'                   # remove doctype declaration  enabled\n        'removeXMLProcInst'               # remove XML processing instructions  enabled\n        'removeComments'                  # remove comments enabled\n        'removeMetadata'                  # remove <metadata> enabled\n        'removeTitle'                     # remove <title>  enabled\n        'removeDesc'                      # remove <desc> enabled\n        'removeUselessDefs'               # remove elements of <defs> without id  enabled\n        # 'removeXMLNS'                     # removes the xmlns attribute (for inline SVG)  disabled\n        'removeEditorsNSData'             # remove editors namespaces, elements, and attributes enabled\n        'removeEmptyAttrs'                # remove empty attributes enabled\n        'removeHiddenElems'               # remove hidden elements  enabled\n        'removeEmptyText'                 # remove empty Text elements  enabled\n        'removeEmptyContainers'           # remove empty Container elements enabled\n        'removeViewBox'                   # remove viewBox attribute when possible  enabled\n        'cleanupEnableBackground'         # remove or cleanup enable-background attribute when possible enabled\n        'minifyStyles'                    # minify <style> elements content with CSSO enabled\n        # 'convertStyleToAttrs'             # convert styles into attributes  disabled\n        'convertColors'                   # convert colors (from rgb() to #rrggbb, from #rrggbb to #rgb)  enabled\n        'convertPathData'                 # convert Path data to relative or absolute (whichever is shorter), convert one segment to another, trim useless delimiters, smart rounding, and much more  enabled\n        'convertTransform'                # collapse multiple transforms into one, convert matrices to the short aliases, and much more enabled\n        'removeUnknownsAndDefaults'       # remove unknown elements content and attributes, remove attributes with default values enabled\n        'removeNonInheritableGroupAttrs'  # remove non-inheritable group's \"presentation\" attributes  enabled\n        'removeUselessStrokeAndFill'      # remove useless stroke and fill attributes enabled\n        'removeUnusedNS'                  # remove unused namespaces declaration  enabled\n        # 'prefixIds'                       # prefix IDs and classes with the SVG filename or an arbitrary string disabled\n        # 'cleanupIDs'                      # remove unused and minify used IDs enabled\n        'cleanupNumericValues'            # round numeric values to the fixed precision, remove default px units  enabled\n        # 'cleanupListOfValues'             # round numeric values in attributes that take a list of numbers (like viewBox or enable-background)  disabled\n        'moveElemsAttrsToGroup'           # move elements' attributes to their enclosing group  enabled\n        'moveGroupAttrsToElems'           # move some group attributes to the contained elements  enabled\n        'collapseGroups'                  # collapse useless groups enabled\n        # 'removeRasterImages'              # remove raster images  disabled\n        'mergePaths'                      # merge multiple Paths into one enabled\n        'convertShapeToPath'              # convert some basic shapes to <path> enabled\n        'convertEllipseToCircle'          # convert non-eccentric <ellipse> to <circle> enabled\n        # 'sortAttrs'                       # sort element attributes for epic readability  disabled\n        'sortDefsChildren'                # sort children of <defs> in order to improve compression enabled\n        # 'removeDimensions'                # remove width/height and add viewBox if it's missing (opposite to removeViewBox, disable it first) disabled\n        # 'removeAttrs'                     # remove attributes by pattern  disabled\n        # 'removeAttributesBySelector'      # removes attributes of elements that match a CSS selector  disabled\n        # 'removeElementsByAttr'            # remove arbitrary elements by ID or className  disabled\n        # 'addClassesToSVGElement'          # add classnames to an outer <svg> element  disabled\n        # 'addAttributesToSVGElement'       # adds attributes to an outer <svg> element disabled\n        # 'removeOffCanvasPaths'            # removes elements that are drawn outside of the viewbox  disabled\n        # 'removeStyleElement'              # remove <style> elements disabled\n        # 'removeScriptElement'             # remove <script> elements  disabled\n        # 'reusePaths'                      # Find duplicated elements and replace them with links disabled\n      ]\n    return svg_pathify ( SVGO.optimize svg_txt, cfg ).data\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_dom_node_description: ( x_dom ) ->\n    R         = { $tag: x_dom.tagName, }\n    R[ name ] = value for { name, value, } in x_dom.attributes\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _boundingbox_from_pathdata: ( pd ) ->\n    PAPER.setup new PAPER.Size 1000, 1000\n    validate.nonempty_text pd\n    path_pth    = PAPER.PathItem.create pd\n    { x\n      y\n      width\n      height  } =   path_pth.bounds\n    # debug '^432-11^', { x, y, width, height, }\n    return { x1: x, y1: y, x2: x + width, y2: y + height, width, height, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _shift_pathdata: ( pd, shift ) ->\n    PAPER.setup new PAPER.Size 1000, 1000\n    validate.nonempty_text pd\n    path_pth    = PAPER.PathItem.create pd\n    path_pth.translate new PAPER.Point -shift.x, 0\n    return ( path_pth.exportSVG { asString: false, precision: 0, } ).getAttribute 'd'\n\n  #---------------------------------------------------------------------------------------------------------\n  _unite_path_data: ( pds ) ->\n    ### SVG path union: Given a list of SVG path data strings, return a single path data string that\n    represents the union of all individual paths. ###\n    PAPER.setup new PAPER.Size 1000, 1000\n    validate.list pds\n    throw new Error \"^45648^ expected path data, got none\" if pds.length is 0\n    return pds[ 0 ] if pds.length is 1\n    p0_pth  = PAPER.PathItem.create pds[ 0 ]\n    for idx in [ 1 ... pds.length ]\n      p0_pth  = p0_pth.unite PAPER.PathItem.create pds[ idx ]\n    return ( p0_pth.exportSVG { asString: false, precision: 0, } ).getAttribute 'd'\n\n\n"
  ]
}