{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/experiments/old-main-module.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nCHR                       = require 'coffeenode-chr'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'SVGTTF/MAIN'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\n{ cwd_relpath }           = require './helpers'\n#...........................................................................................................\n### https://github.com/loveencounterflow/coffeenode-teacup ###\nT                         = require 'coffeenode-teacup'\nglob                      = require 'glob'\nDOMParser                 = ( require 'xmldom-silent' ).DOMParser\nXPATH                     = require 'xpath'\nSvgPath                   = require 'svgpath'\n### https://github.com/fontello/svg2ttf ###\nsvg2ttf                   = require 'svg2ttf'\nSVGTTF                    = @\n# options                   = require './options'\nselect                    = XPATH.useNamespaces 'SVG': 'http://www.w3.org/2000/svg'\n\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@generate = ( me ) ->\n  glyphs            = {}\n  glyph_count       = 0\n  parser            = new DOMParser()\n  fallback          = null\n  fallback_count    = 0\n  fallback_source   = null\n  min_cid           = +Infinity\n  max_cid           = -Infinity\n  me.fontname       = me.fontname\n  info \"^svgttf#1234^ reading files for font #{rpr me.fontname}\"\n  #.........................................................................................................\n  # for route in input_routes\n  local_min_cid     = +Infinity\n  local_max_cid     = -Infinity\n  local_glyph_count = 0\n  source            = FS.readFileSync me.sourcepath, encoding: 'utf-8'\n  me.doc            = parser.parseFromString( source, 'application/xml' )\n  #.......................................................................................................\n  @_find_origin me\n  urge \"^svgttf#334 found origin at #{[ me.x0, me.y0, ]}\"\n  selector          = \"\"\"//SVG:svg//SVG:g[@id='layer:glyphs']//SVG:path\"\"\"\n  paths             = select selector, me.doc\n  path_count        = paths.length\n  whisper \"^svgttf#1888^ #{me.fontname}: found #{paths.length} outlines\"\n  #.......................................................................................................\n  #.......................................................................................................\n  #.......................................................................................................\n  for path in paths\n    #.....................................................................................................\n    if ( transform = path.getAttribute 'transform' )? and transform.length > 0\n      match         = transform.match /^translate\\(([-+.0-9]+),([-+.0-9]+)\\)$/\n      throw new Error \"unable to parse transform #{rpr transform}\" unless match?\n      [ _, x, y, ]  = match\n      x             = parseFloat x\n      y             = parseFloat y\n      validate.number x\n      validate.number y\n      transform     = [ 'translate', x, y ]\n    #.....................................................................................................\n    else\n      transform     = null\n    #.....................................................................................................\n    path_data     = path.getAttribute 'd'\n    continue if ( not path_data? ) or ( path_data is '' ) ### safeguard against (meaningless, but legal) empty paths ###\n    svg_path      = ( new SvgPath path_data ).abs()\n    svg_path      = svg_path.translate transform[ 1 ], transform[ 2 ] if transform?\n    center        = @center_from_absolute_path svg_path\n    col           = ( center[ 0 ] - me.x0 ) // me.module\n    row           = ( center[ 1 ] - me.y0 ) // me.module\n    dx            = - ( col * me.module )\n    dy            = - ( row * me.module )\n    svg_path      = svg_path\n      .translate  dx, dy\n      .scale      1, -1\n      # .translate  0, 64.9 ### TAINT magic number, equals ( me.module * 2 - 7.1 ) for some reason ###\n      .translate  0, 28.9\n      .scale      me.scale\n      .round      0\n    cid                 = 0x4e00 + ( col %% 16 ) + ( row * 16 ) ### TAINT magic number 16: glyphs per row ###\n    unless isa.number cid\n      ### TAINT should never happen ###\n      warn \"^svgttf#3442 not a CID: [ col, row ]: #{ [ col, row, ]}, center: #{center}, path_data: #{rpr path_data}\"\n      continue\n    glyphs[ cid ]       = [ cid, svg_path, ]\n    ### !!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  glyphs = ( entry for _, entry of glyphs )\n  svgfont = @svgfont_from_name_and_glyphs me, me.fontname, glyphs\n  return @_write_ttf me, svgfont\n  # return null\n  # #.......................................................................................................\n  # #.......................................................................................................\n  # #.......................................................................................................\n  # #.......................................................................................................\n  # #.......................................................................................................\n  # for path in paths\n  #   #.....................................................................................................\n  #   if ( transform = path.getAttribute 'transform' )? and transform.length > 0\n  #     match         = transform.match /^translate\\(([-+.0-9]+),([-+.0-9]+)\\)$/\n  #     throw new Error \"unable to parse transform #{rpr transform}\" unless match?\n  #     [ _, x, y, ]  = match\n  #     x             = parseFloat x\n  #     y             = parseFloat y\n  #     validate.number x\n  #     validate.number y\n  #     transform     = [ 'translate', x, y ]\n  #   #.....................................................................................................\n  #   else\n  #     transform     = null\n  #   #.....................................................................................................\n  #   path          = ( new SvgPath path.getAttribute 'd' ).abs()\n  #   path          = path.translate transform[ 1 ], transform[ 2 ] if transform?\n  #   path          = path.translate me.correction[ 0 ], me.correction[ 1 ] if me.correction?\n  #   path          = path.translate -me.x0, -me.y0\n  #   center        = @center_from_absolute_path path\n  #   [ x, y, ]     = center\n  #   x            -= me.offset[ 0 ]\n  #   y            -= me.offset[ 1 ]\n  #   col           = Math.floor x / me.module\n  #   row           = Math.floor y / me.module\n  #   block_count   = row // me.block_height\n  #   actual_row    = row - block_count\n  #   cid           = me.cid0 + actual_row * me.row_length + col\n  #   debug '^7765-1^', \"center at #{rpr center}\"\n  #   debug '^7765-2^', \"col #{col}, row #{row}, block_count #{block_count}, actual_row #{actual_row}, cid 0x#{cid.toString 16}\"\n  #   debug '^7765-3^', [ x - me.x0, y - me.y0, ]\n  #   dx            = - ( col * me.module ) - me.offset[ 0 ]\n  #   dy            = - ( row * me.module ) - me.offset[ 1 ]\n  #   #.....................................................................................................\n  #   path          = path\n  #     .translate  dx, dy\n  #     .scale      1, -1\n  #     .translate  0, me.module\n  #     .scale      me.scale\n  #     .round      0\n  #   #.....................................................................................................\n  #   if cid < me.cid0\n  #     prefix          = if fallback? then 're-' else ''\n  #     fallback        = path\n  #     fallback_source = me.sourcepath # filename\n  #     whisper \"^svgttf#2542^ #{cwd_relpath me.sourcepath}: #{prefix}assigned fallback\"\n  #   #.....................................................................................................\n  #   else\n  #     min_cid       = Math.min       min_cid, cid\n  #     max_cid       = Math.max       max_cid, cid\n  #     local_min_cid = Math.min local_min_cid, cid\n  #     local_max_cid = Math.max local_max_cid, cid\n  #     if glyphs[ cid ]?\n  #       warn \"^svgttf#3196^ #{cwd_relpath me.sourcepath}: duplicate CID: 0x#{cid.toString 16}\"\n  #     else\n  #       glyphs[ cid ]       = [ cid, path, ]\n  #       glyph_count        += 1\n  #       local_glyph_count  += 1\n  # #.......................................................................................................\n  # if local_glyph_count > 0\n  #   min_cid_hex = '0x' + local_min_cid.toString 16\n  #   max_cid_hex = '0x' + local_max_cid.toString 16\n  #   help \"^svgttf#3850^ #{cwd_relpath me.sourcepath}: added #{local_glyph_count} glyph outlines to [ #{min_cid_hex} .. #{max_cid_hex} ]\"\n  # else\n  #   warn \"^svgttf#4504^ #{cwd_relpath me.sourcepath}: no glyphs found\"\n  # #.........................................................................................................\n  # #.........................................................................................................\n  # #.........................................................................................................\n  # #.........................................................................................................\n  # #.........................................................................................................\n  # #.........................................................................................................\n  # if glyph_count is 0\n  #   warn \"^svgttf#5158^ no glyphs found; terminating\"\n  #   process.exit 1\n  # #.........................................................................................................\n  # for cid in [ min_cid .. max_cid ]\n  #   unless glyphs[ cid ]?\n  #     glyphs[ cid ]   = [ cid, fallback, ]\n  #     fallback_count += 1\n  # if fallback_count > 0\n  #   whisper \"^svgttf#5812^ filled #{fallback_count} positions with fallback outline from #{fallback_source}\"\n  # min_cid_hex = '0x' + min_cid.toString 16\n  # max_cid_hex = '0x' + max_cid.toString 16\n  # help \"^svgttf#6466^ added #{glyph_count} glyph outlines to [ #{min_cid_hex} .. #{max_cid_hex} ]\"\n  # #.........................................................................................................\n  # glyphs = ( entry for _, entry of glyphs )\n  # glyphs.sort ( a, b ) ->\n  #   return +1 if a[ 0 ] > b[ 0 ]\n  #   return -1 if a[ 0 ] < b[ 0 ]\n  #   return  0\n  # #.........................................................................................................\n  # svgfont = @svgfont_from_name_and_glyphs me.fontname, glyphs\n  # return @_write_ttf me, svgfont\n\n#-----------------------------------------------------------------------------------------------------------\n@_find_origin = ( me ) ->\n  unless ( elements = select \"//SVG:circle[@id='origin']\", me.doc ).length is 1\n    throw new Error \"^svgttf#409 unable to find element with id `origin`\"\n  origin = elements[ 0 ]\n  me.x0 = parseFloat origin.getAttribute 'cx'\n  me.y0 = parseFloat origin.getAttribute 'cy'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_write_ttf = ( me, svgfont ) ->\n  targetpath = me.targetpath\n  ### svg2ttf has a strange API and returns a buffer that isn't a `Buffer`...  ###\n  FS.writeFileSync targetpath, new Buffer.from ( svg2ttf svgfont ).buffer\n  help \"^svgttf#7120^ output written to #{targetpath}\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@center_from_absolute_path = ( path ) ->\n  return @center_from_absolute_points @points_from_absolute_path path\n\n#-----------------------------------------------------------------------------------------------------------\n@center_from_absolute_points = ( path ) ->\n  node_count  = path.length\n  sum_x       = 0\n  sum_y       = 0\n  for [ x, y, ] in path\n    throw new Error \"found undefined points in path\" unless x? and y?\n    sum_x += x # if x?\n    sum_y += y # if y?\n  return [ sum_x / node_count, sum_y / node_count, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@points_from_absolute_path = ( path ) ->\n  R = []\n  #.........................................................................................................\n  for node in path[ 'segments' ]\n    [ command, xy..., ] = node\n    #.......................................................................................................\n    ### Ignore closepath command: ###\n    continue if /^[zZ]$/.test command\n    #.......................................................................................................\n    # urge '©99052', node\n    throw new Error \"unknown command #{rpr command} in path #{rpr path}\" unless /^[MLHVCSQTA]$/.test command\n    #.......................................................................................................\n    switch command\n      #.....................................................................................................\n      when 'H'\n        [ x, y, ] = [ xy[ 0 ], last_y, ]\n        R.push [ x, y, ]\n      #.....................................................................................................\n      when 'V'\n        [ x, y, ] = [ last_x, xy[ 0 ], ]\n        R.push [ x, y, ]\n      #.....................................................................................................\n      when 'M', 'L'\n        for idx in [ 0 ... xy.length ] by +2\n          [ x, y, ] = [ xy[ idx ], xy[ idx + 1 ], ]\n          R.push [ x, y, ]\n      #.....................................................................................................\n      when 'C'\n        for idx in [ 0 ... xy.length ] by +6\n          [ x, y, ] = [ xy[ idx + 4 ], xy[ idx + 5 ], ]\n          R.push [ x, y, ]\n      #.....................................................................................................\n      when 'S'\n        for idx in [ 0 ... xy.length ] by +4\n          [ x, y, ] = [ xy[ idx + 2 ], xy[ idx + 3 ], ]\n          R.push [ x, y, ]\n      #.....................................................................................................\n      when 'Q'\n        for idx in [ 0 ... xy.length ] by +4\n          [ x, y, ] = [ xy[ idx + 2 ], xy[ idx + 3 ], ]\n          R.push [ x, y, ]\n        # warn rpr path\n        # throw new Error \"\"\"\n        #   quadratic splines (SVG path commands `q` and `Q` not yet supported; in case you're\n        #   working with Inkscape, identify the offending path and nudge one of its control points\n        #   slightly and save the document; this will cause Inkscape to convert the outline to a\n        #   cubic spline.\n\n        #   see http://inkscape.13.x6.nabble.com/Quadratic-beziers-td2856790.html\"\"\"\n      #.....................................................................................................\n      else\n        warn rpr path\n        throw new Error \"unknown command #{rpr command} in path\"\n        # help [ null, null, ]\n        # [ x, y, ] = [ null, null, ]\n        # R.push [ x, y, ]\n    #.......................................................................................................\n    last_x = x\n    last_y = y\n  #.........................................................................................................\n  return R\n\n#===========================================================================================================\n# SVG GENERATION\n#-----------------------------------------------------------------------------------------------------------\nT.SVG = ( P... ) ->\n  Q =\n    'xmlns':        'http://www.w3.org/2000/svg'\n  return T.TAG 'svg', Q, P...\n\n# <font id=\"icomoon\" horiz-adv-x=\"512\">\n# <font-face units-per-em=\"512\" ascent=\"480\" descent=\"-32\" />\n\n#-----------------------------------------------------------------------------------------------------------\nT.DEFS = ( P... ) ->\n  return T.TAG 'defs', P...\n\n#-----------------------------------------------------------------------------------------------------------\nT.FONT = ( me, font_name, P... ) ->\n  Q =\n    'id':             font_name\n    'horiz-adv-x':    me.module * me.scale\n    # 'horiz-origin-x':   0\n    # 'horiz-origin-y':   0\n    # 'vert-origin-x':    0\n    # 'vert-origin-y':    0\n    # 'vert-adv-y':       0\n  return T.TAG 'font', Q, P...\n\n#-----------------------------------------------------------------------------------------------------------\nT.FONT_FACE = ( me, font_family ) ->\n  Q =\n    'font-family':    font_family\n    'units-per-em':   me.module * me.scale\n    ### TAINT probably wrong values ###\n    'ascent':         me.ascent\n    'descent':        me.descent\n  ### TAINT kludge ###\n  # return T.selfClosingTag 'font-face', Q\n  return T.RAW ( T.render => T.TAG 'font-face', Q ).replace /><\\/font-face>$/, ' />'\n\n#-----------------------------------------------------------------------------------------------------------\nT.GLYPH = ( cid, path ) ->\n  Q           =\n    # unicode:  T.TEXT CHR.as_ncr cid\n    unicode:  CHR.as_chr cid\n    d:        SVGTTF._path_data_from_svg_path path\n  return T.TAG 'glyph', Q\n\n#-----------------------------------------------------------------------------------------------------------\nT.MARKER = ( xy, r = 10 ) ->\n  return T.TAG 'circle', cx: xy[ 0 ], cy: xy[ 1 ], r: r, fill: '#f00'\n\n#-----------------------------------------------------------------------------------------------------------\n@_path_data_from_svg_path = ( me ) -> ( s[ 0 ] + s[ 1 .. ].join ',' for s in me.segments ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\nT.path = ( path ) ->\n  path_data = SVGTTF._path_data_from_svg_path path\n  return T.TAG 'path', d: path_data, fill: '#000'\n\n#-----------------------------------------------------------------------------------------------------------\n@svgfont_from_name_and_glyphs = ( me, font_name, glyphs ) ->\n  return T.render =>\n    #.........................................................................................................\n    T.RAW \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n\"\"\"\n    ### must preserve space at end of DOCTYPE declaration ###\n    T.RAW \"\"\"<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >\\n\"\"\"\n    T.SVG =>\n      T.TEXT '\\n'\n      T.DEFS =>\n        T.TEXT '\\n'\n        T.FONT me, font_name, =>\n          T.TEXT '\\n'\n          T.FONT_FACE me, font_name\n          T.TEXT '\\n'\n          for [ cid, path, ] in glyphs\n            T.RAW \"<!-- #{cid.toString 16} -->\"\n            T.GLYPH cid, path\n            T.TEXT '\\n'\n        T.TEXT '\\n'\n      T.TEXT '\\n'\n\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  d = \"M168,525.89c38,36,48,48,46,81s5,47-46,52 s-88,35-91-27s-21-73,11-92S168,525.89,168,525.89z\"\n  path = new SvgPath d\n    .scale 0.5\n    .translate 100, 200\n    .abs()\n    .round 0\n    # .rel()\n    # .round(1) # Fix js floating point error/garbage after rel()\n    # .toString()\n  debug JSON.stringify path\n  # debug path.toString()\n  help @points_from_absolute_path path\n  help @center_from_absolute_path path\n  debug @f path\n\n#-----------------------------------------------------------------------------------------------------------\n@_join_routes = ( P... ) -> PATH.resolve process.cwd(), PATH.join P...\n\n\n"
  ]
}