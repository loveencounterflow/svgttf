{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'SVGTTF/CLI'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = @types\n#...........................................................................................................\nCHR                       = require 'coffeenode-chr'\n### https://github.com/loveencounterflow/coffeenode-teacup ###\n# T                         = require 'coffeenode-teacup'\nglob                      = require 'glob'\nSVGTTF                    = require '..'\n{ cwd_abspath }           = require './helpers'\n\n#-----------------------------------------------------------------------------------------------------------\n@_compile_settings = ( settings ) ->\n  R                   = settings\n  R.sourcepath = cwd_abspath            R.sourcepath\n  R.fontname   = @_font_name_from_route R.sourcepath\n  R.cid0       = @_cid0_from_route      R.sourcepath\n  R.targetpath = cwd_abspath            ( PATH.dirname R.sourcepath ), R.fontname + '.ttf'\n  return R\n\n  # @_get_input_routes R\n  # @_get_output_route R\n  # #.........................................................................................................\n  # for name in ( name for name of R ).sort()\n  #   whisper ( ( name + ':' ).padEnd 20 ), rpr R[ name ]\n  # #.........................................................................................................\n  # debug '^5542^', R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_output_route = ( settings ) ->\n#   output_format     = settings[ 'output-format'     ]\n#   output            = settings[ 'output_directory'  ]\n#   font_name         = settings[ 'fontname'         ]\n#   #.........................................................................................................\n#   switch output_format\n#     when 'ttf'\n#       extension = settings[ 'output-extension' ] = 'ttf'\n#     else throw new Error \"output format not supported: #{rpr output_format}\"\n#   #.........................................................................................................\n#   R = settings[ 'output-route' ] = @_join_routes output, \"#{font_name}.#{extension}\"\n#   if ( not settings[ 'overwrite' ] ) and FS.existsSync R\n#     warn \"target already exists: #{R}\"\n#     help \"either\"\n#     help \"  * correct your input\"\n#     help \"  * or remove target first\"\n#     help \"  * or use the `-f` option\"\n#     throw new Error \"target exists\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_input_routes = ( settings ) ->\n#   input_format      = settings[ 'input-format'    ]\n#   input_directory   = settings[ 'input_directory' ]\n#   font_name         = settings[ 'fontname'       ]\n#   #.........................................................................................................\n#   switch input_format\n#     when 'svg', 'svgfont'\n#       extension = settings[ 'input-extension' ] = 'svg'\n#     else throw new Error \"input format not supported: #{rpr input_format}\"\n#   #.........................................................................................................\n#   name_glob   = \"#{font_name}-+([0-9a-f]).#{extension}\"\n#   route_glob  = settings[ 'input-glob'    ] = @_join_routes input_directory, name_glob\n#   R           = settings[ 'input-routes'  ] = glob.sync route_glob\n#   return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_font_name_from_route = ( route ) ->\n  match = route.match /([^\\/]+)-[0-9a-f]+?\\.svg$/\n  unless match?\n    throw new Error \"^svgttfcli#555^ unable to parse route #{rpr route}\"\n  R = match[ 1 ]\n  unless R.length > 0\n    throw new Error \"^svgttfcli#587^ illegal font name in route #{rpr route}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_cid0_from_route = ( route ) ->\n  match = route.match /-([0-9a-f]+)\\.svg$/\n  unless match?\n    throw new Error \"^svgttfcli#619^ unable to parse route #{rpr route}\"\n  R = parseInt match[ 1 ], 16\n  unless 0x0000 <= R <= 0x10ffff\n    throw new Error \"^svgttfcli#651^ illegal CID in route #{rpr route}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nunless require.main is module then do =>\n  throw new Error \"^svgttfcli#683^ this module cannot be imported\"\n\n#-----------------------------------------------------------------------------------------------------------\nprogram       = require 'commander'\nis_recognized = false\n\n#-----------------------------------------------------------------------------------------------------------\nprogram\n  .version ( require '../package.json' ).version\n  .command      'generate <sourcepath> [targetpath]'\n  .description  \"generate a *.ttf font from an SVG source\"\n  .option       '-f, --force', \"overwrite existing *.ttf file where present\"\n  .action ( sourcepath, targetpath, options ) =>\n    is_recognized = true\n    #.......................................................................................................\n    if options.targetpath?\n      throw new Error \"^svgttfcli#715 setting `targetpath` not yet implemented\"\n    #.......................................................................................................\n    settings      =\n      sourcepath:       sourcepath\n      targetpath:       options.targetpath ? null\n      force_overwrite:  options.force      ? false\n    settings      = @_compile_settings settings\n    settings      = { ( require './options' )..., settings..., }\n    # debug '^7773^', settings\n    SVGTTF.generate settings\n\n#-----------------------------------------------------------------------------------------------------------\nprogram.parse process.argv\nif not is_recognized\n  console.error ( CND.yellow CND.reverse \"^svgttfcli#747^\\n\" ) + CND.red CND.reverse \"\"\"\n    Invalid command: #{process.argv[ 2 .. ].join ' '}\n    See --help for a list of available commands.\"\"\"\n  process.exit 1\n\n#.........................................................................................................\n#   usage     = \"\"\"\n#   Usage: svgttf [-f] <input_directory> <fontname> <input-format> <output_directory> <output-format>\n\n#         Currently the only allowed arguments are:\n#         <input-format>:     must be `svg`\n#         <output-format>:    must be `ttf`\n#         <input_directory>:  route to directory with your SVG design sheets\n#         <fontname>:        name of your font\n#         <output_directory>: directory where output is written to\n\n#         Please observe:\n\n#         * The structure of your SVG design sheets must follow the guidelines as detailed in the\n#           project README.md.\n\n#         * Your font files must be named like `myfontname-e100.svg`, `myfontname-e200.svg`, ..., i.e.\n#           each filename has the font name first and ends with an indication of the first CID (Unicode\n#           codepoint, in hexadecimal) and the filename extension `.svg`.\n\n#         * Use `.` (dot) to get a file named `myfontname.ttf` in the current directory.\n\n#         * `svgttf` will not overwrite an existing file unless given the `--force` (or `-f`) option.\n\n#   Options:\n#     -h, --help\n#     -v, --version\n#     -f, --force\n#   \"\"\"\n#   #.........................................................................................................\n#   cli_options = docopt usage, version: version, help: ( left, collected ) ->\n#     help '\\n' + usage\n#     urge '^svgttf#673^', left\n#     help '^svgttf#674^', collected\n#   #.........................................................................................................\n#   if cli_options?\n#     @main @_compile_settings cli_options\n\n# # node lib/main.js --force art        svgttf-sample-font  svg /tmp      ttf\n# # node lib/main.js --force materials  someglyphs          svg materials ttf\n\n\n\n\n\n\n\n\n\n"
  ]
}